'''
You come across an experimental new kind of memory stored on an infinite two-dimensional grid.

Each square on the grid is allocated in a spiral pattern starting at a location
marked 1 and then counting up while spiraling outward. For example, the first few
squares are allocated like this:

17  16  15  14  13
18   5   4   3  12
19   6   1   2  11
20   7   8   9  10
21  22  23---> ...

While this is very space-efficient (no squares are skipped), requested data must be
carried back to square 1 (the location of the only access port for this memory system)
by programs that can only move up, down, left, or right. They always take the shortest path:
the Manhattan Distance between the location of the data and square 1.

For example:

    Data from square 1 is carried 0 steps, since it's at the access port.
    Data from square 12 is carried 3 steps, such as: down, left, left.
    Data from square 23 is carried only 2 steps: up twice.
    Data from square 1024 must be carried 31 steps.

How many steps are required to carry the data from the square identified in your puzzle input all the way to the access port?
Puzzle input: 325489

'''

#############################################################################
# given x and n*n <= x. n*n is the number at the bottom right corner and n-1 is the distance from there to 1.
# (n*n + n + 1) takes us around each corner
# difference between x and n*n is the amount we need to travel around the sq
# 570(takes us to top right) + 570(takes us to top left) + 570(takes us to bottom left)
# then 18 steps left. And we know the width of square is 570. 1 is located half way in between = (570/2) = 285
# we need to travel 285 - 18 steps to the right
# since the number will be at the bottom line we must travel halfway up the square to get to 1. (570/2) = 285
# total distance between 325489 and 1 is 285 - 18 + 285 = 552

x = 325489
n = 1
while(n*n <= x):
    n += 2
if(n*n >= x):
    n -=2

print(n)                  # 569
print(n*n)                # 323761
print(325489-(n*n))       # the amount of steps in last(outer) lap- 1728


###################################### someone else's working code

# My spiral for part 1 was designed to start at 0, so we have to subtract 1 for my input.
puzzle_input_1 = 312051 - 1
puzzle_input_2 = 312051


def solve1(puzzle_input):
    current_sum = layer = 0
    corners = previous_corners = [0, 0, 0, 0]
    corner = offset = 2
    while current_sum < puzzle_input - layer * 8:
        previous_corners = corners
        corners = [corner + offset * x for x in range(4)]
        offset += 2
        corner = corners[-1] + offset
        current_sum += layer * 8
        layer += 1

    previous_corners.extend(corners)
    for i in range(len(previous_corners) - 1):
        if puzzle_input >= previous_corners[i] and puzzle_input <= previous_corners[i + 1]:
            center = (previous_corners[i] + previous_corners[i + 1]) // 2
            return layer + abs(puzzle_input - center)


def needed_layers(puzzle_input):
    current_sum = layer = 0
    while current_sum < puzzle_input - layer * 8:
        current_sum += layer * 8
        layer += 1
    return layer


def sum_adjacent(grid, row, col):

    result = 0

    result += grid[row + 1][col]
    result += grid[row + 1][col + 1]
    result += grid[row + 1][col - 1]

    result += grid[row - 1][col]
    result += grid[row - 1][col + 1]
    result += grid[row - 1][col - 1]

    result += grid[row][col - 1]
    result += grid[row][col + 1]

    return result


def spiral_loop(grid, row, col, offset):
    while(True):
        col += 1
        current = sum_adjacent(grid, row, col)
        grid[row][col] = current
        yield current
        for _ in range(offset - 1):
            row -= 1
            current = sum_adjacent(grid, row, col)
            grid[row][col] = current
            yield current
        for _ in range(offset):
            col -= 1
            current = sum_adjacent(grid, row, col)
            grid[row][col] = current
            yield current
        for _ in range(offset):
            row += 1
            current = sum_adjacent(grid, row, col)
            grid[row][col] = current
            yield current
        for _ in range(offset):
            col += 1
            current = sum_adjacent(grid, row, col)
            grid[row][col] = current
            yield current
        offset += 2


def solve2(puzzle_input):
    current_value = 0
    layers = needed_layers(puzzle_input) + 5
    grid = [[0 for x in range(layers)] for y in range(layers)]
    row = col = layers // 2  # Start in the middle
    grid[row][col] = 1
    i = 0
    spiral_gen = spiral_loop(grid, row, col, 2)
    while current_value <= puzzle_input:
        current_value = next(spiral_gen)
        i += 1
    return current_value


print(solve1(puzzle_input_1))
print(solve2(puzzle_input_2))
